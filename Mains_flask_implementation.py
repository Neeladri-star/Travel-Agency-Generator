# -*- coding: utf-8 -*-
"""flask_implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ad03wYsYM7MvhAm7_W6qxFJtUnx8fePS
"""

# Step 1: Install Required Libraries
!pip install flask google-generativeai pyngrok

# Step 2: Create a 'templates' directory and the HTML template
import os

# Create 'templates' directory inside the Colab environment
if not os.path.exists('templates'):
    os.makedirs('templates')

# HTML content for index.html
html_code = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vacation Itinerary Generator</title>
</head>
<body>
    <h1>Vacation Itinerary Generator</h1>

    <!-- Form for user input -->
    <form method="POST">
        <label for="destination">Destination:</label><br>
        <input type="text" id="destination" name="destination" required><br><br>

        <label for="vacation_type">Vacation Type:</label><br>
        <input type="text" id="vacation_type" name="vacation_type" required><br><br>

        <label for="dates">Dates:</label><br>
        <input type="text" id="dates" name="dates" required><br><br>

        <input type="submit" value="Generate Itinerary">
    </form>

    {% if itinerary %}
        <h2>Generated Itinerary:</h2>
        <p>{{ itinerary }}</p>
    {% endif %}
</body>
</html>
"""

# Save the HTML content to 'templates/index.html'
with open('templates/index.html', 'w') as f:
    f.write(html_code)

"""###### We create an HTML file for the web form where users can input their vacation details (destination, vacation type, and dates). The form allows users to submit their details, and itâ€™s saved in a templates folder for Flask to use.

##### Flask is initialized to handle the web server and routes.

The Gemini API is set up with an API key, and we initialize the model used to generate vacation itineraries.
"""

# Step 3: Flask and ngrok Integration
from flask import Flask, render_template, request
import google.generativeai as genai
from pyngrok import ngrok

# Initialize Flask app
app = Flask(__name__)

# Set up Gemini API key
api_key = 'AIzaSyC8ISfeYhq8yLm2-bKZQZ8xW4F9RP_G0wA'  # Replace with your actual Gemini API key
genai.configure(api_key=api_key)

# Initialize Gemini model
model = genai.GenerativeModel('gemini-2.0-flash')  # Adjust the model name if necessary

# Function to generate vacation itinerary using Gemini API
def generate_vacation_itinerary(destination, vacation_type, dates):
    # Define the instruction (prompt) for Gemini API
    instruction = "Generate a detailed vacation itinerary with activities, must-visit places, and recommended accommodations."
    query = f"Vacation type: {vacation_type}. Destination: {destination}. Travel dates: {dates}."

    # Combine instruction and query
    prompt = f"{instruction}\n{query}"

    # Generate the response using the Gemini API model
    response = model.generate_content(prompt)

    # Extract and return the generated content (itinerary)
    if response.candidates and len(response.candidates) > 0 and response.candidates[0].content.parts:
        return response.candidates[0].content.parts[0].text
    else:
        return "Error: No valid response generated."

@app.route("/", methods=["GET", "POST"])
def home():
    itinerary = None
    if request.method == "POST":
        # Get user input from the form
        destination = request.form["destination"]
        vacation_type = request.form["vacation_type"]
        dates = request.form["dates"]

        # Generate the vacation itinerary
        itinerary = generate_vacation_itinerary(destination, vacation_type, dates)

    return render_template("index.html", itinerary=itinerary)

"""A function is created to generate vacation itineraries based on the user's input by sending a request to the Gemini model.

It creates a prompt, sends it to the model, and extracts the generated itinerary.

When a user submits the form, their inputs are processed:

The Flask route collects the destination, vacation type, and dates from the form.

The app calls the Gemini model to generate the itinerary and then displays it on the webpage.
"""

# Step 4: Set up ngrok and expose the Flask app to the internet
ngrok.set_auth_token("2w1UacF0l7m7yIotBt5AlSEB5bY_a5DExUnEqMPgnoSPaChT")  # Replace with your actual ngrok authtoken
public_url = ngrok.connect(5000)
print(f"Flask app is running at: {public_url}")

"""ngrok is used to expose the locally running Flask app to the internet with a public URL.

The URL is displayed so users can access the app from anywhere.

The Flask app is run locally on port 5000, but ngrok forwards the traffic from the public URL to the app, making it accessible in a browser.
"""

# Step 5: Run the Flask app
app.run(port=5000)

